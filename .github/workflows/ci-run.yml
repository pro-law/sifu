name: CI Runner

on:
  workflow_dispatch:
    inputs:
      CRAWLEE_PURGE_ON_START:
        type: boolean
        description: 'Purge storage on start'
        default: false
      MAX_REQUESTS_PER_CRAWL:
        type: number
        description: 'Max requests per crawl'
        default: 100
      MAX_CONCURRENCY:
        type: number
        description: 'Max concurrency'
        default: 5
  repository_dispatch:
    types: [run-ci]

env:
  CI_RUNNER: true
  CRAWLEE_STORAGE_DIR: 'ci-storage'
  CRAWLEE_PURGE_ON_START: ${{ (github.event.inputs.CRAWLEE_PURGE_ON_START) && '1' || '0' }}
  MAX_REQUESTS_PER_CRAWL: ${{ github.event.inputs.MAX_REQUESTS_PER_CRAWL || 100 }}
  MAX_CONCURRENCY: ${{ github.event.inputs.MAX_CONCURRENCY || 5 }}
  TVPL_USERNAME: ${{ secrets.TVPL_USERNAME }}
  TVPL_PASSWORD: ${{ secrets.TVPL_PASSWORD }}
  TVPL_MEMBER_GA: ${{ secrets.TVPL_MEMBER_GA }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: |
            ${{ env.STORE_PATH }}
            /home/runner/.cache/
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run
        run: pnpm run start:ci
        continue-on-error: true

      - name: Should amend if the last commit message is the same
        id: should-amend
        run: |
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=format:%s)
          echo "Last commit message: $LAST_COMMIT_MESSAGE"
          if [[ $LAST_COMMIT_MESSAGE == "chore(documents): update documents [skip ci]" ]]; then
            echo "SHOULD_AMEND=true" >> $GITHUB_ENV
          else
            echo "SHOULD_AMEND=false" >> $GITHUB_ENV
          fi

      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          message: 'chore(documents): update documents [skip ci]'
          force: ${{ env.SHOULD_AMEND == 'true' }}
          amend: ${{ env.SHOULD_AMEND == 'true' }}

      - name: Dispatch trigger
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_TOKEN }}
          repository: ${{ github.repository }}
          event-type: run-ci
          client-payload: '{}'
